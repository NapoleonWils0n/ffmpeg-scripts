#!/bin/sh

# image to video

# script usage
usage()
{
  echo "$(basename "$0") -i infile.(png|jpg|jpeg) -d (000) -z (in|out) -p (tl|c|tc|tr|bl|br)"
  exit 2
}

# error messages
HOME_ERR='HOME directory not set or null'
NOTFILE_ERR='not a file'
INVALID_OPT_ERR='Invalid option:'
REQ_ARG_ERR='requires an argument'
WRONG_ARGS_ERR='wrong number of arguments passed to script'
ARGS_ERR='incorrect arguments passed to script'
FILE_EXT_ERR='has the wrong file extension'
NOT_MEDIA_FILE_ERR='is not a media file'

# number of args passed to script, needs to be stored before getopts
if [ $# -gt 0 ]; then
    first_arg="$1"
    third_arg="$3"
    fifth_arg="$5"
    seventh_arg="$7"
    args="$#"
else
   { echo "${WRONG_ARGS_ERR}" && usage; }
fi

# help function
help ()
{
echo "\
+ $(basename "$0") -i infile.(png|jpg|jpeg) -d (000) -z (in|out) -p (tl|c|tc|tr|bl|br)

-i = infile.(png|jpg|jpeg)
-d = duration : from 1-999
-z = zoom : in or out
-p = position : zoom to location listed below

+------------------------------+
+tl            tc            tr+
+                              +        
+              c               +
+                              +
+bl                          br+
+------------------------------+"
exit 2
}

# getopts and check if input a file
while getopts ':i:d:z:p:h' opt
do
  case ${opt} in
     i) infile="${OPTARG}"
	[ -f "${infile}" ] || { echo "${infile} ${NOTFILE_ERR}" && usage; };;
     d) dur="${OPTARG}";;
     z) zoom="${OPTARG}";;
     p) position="${OPTARG}";;
     h) help;;
     \?) echo "${INVALID_OPT_ERR} ${OPTARG}" 1>&2 && usage;;
     :) echo "${INVALID_OPT_ERR} ${OPTARG} ${REQ_ARG_ERR}" 1>&2 && usage;;
  esac
done
shift $((OPTIND-1))

# duration regex match [1-9]
dur_regex='^[0-9]\{1,2\}$'
position_regex='^[a-z]\{1,2\}$'

# check arguments
if [ "${args}" -eq 8 ]; then
   {
   [ "${first_arg}" = '-i' ] && \
   [ -f "${infile}" ] && \
   [ "${third_arg}" = '-d' ] && \
   expr "${dur}" : "${dur_regex}" 1>/dev/null && \
   [ "${fifth_arg}" = '-z' ] && \
   [ "${zoom}" = 'in' ] || [ "${zoom}" = 'out' ] && \
   [ "${seventh_arg}" = '-p' ] && \
   expr "${position}" : "${position_regex}" 1>/dev/null
   } || { echo "${ARGS_ERR}" && usage; }
else
   { echo "${WRONG_ARGS_ERR}" && usage; }
fi

# infile, infile name and extension
infile_nopath="${infile##*/}"
infile_name="${infile_nopath%.*}"
infile_ext="${infile##*.}"

# file extension regular expressions for case statement
png='[Pp][Nn][Gg]'
jpg='[Jj][Pp][Gg]'
jpeg='[Jj][Pp][Ee][Gg]'

# check the file extension before passing to the file command
case "${infile_ext}" in
    ${png}|${jpg}|${jpeg});;
    *) { echo "${infile} ${FILE_EXT_ERR}" && usage; };;
esac

# outfile file recording destination
outfile="${HOME:?${HOME_ERR}}/Desktop/${infile_name}-zoompan-$(date +"%Y-%m-%d-%H-%M-%S").mp4"

# file command check input file mime type
filetype="$(file --mime-type -b "${infile}")"

# image mimetypes
png_mime='image/png'
jpg_mime='image/jpeg'

# ffprobe get image height
imgheight="$(ffprobe -v error -select_streams v:0 -show_entries stream=height -of default=nw=1:nk=1 "${infile}")"

# frames per seconds
infps='30'

### zoom in positions

# zoom in top left
zi_top_left="scale=-2:10*ih,\
zoompan=z='min(zoom+0.0015,1.5)':\
fps=${infps}:d=${infps}*${dur},\
scale=-2:${imgheight}" \

# zoom in center
zi_center="scale=-2:10*ih,\
zoompan=z='min(zoom+0.0015,1.5)':\
fps=${infps}:d=${infps}*${dur}:\
x='iw/2-(iw/zoom/2)':\
y='ih/2-(ih/zoom/2)',\
scale=-2:${imgheight}" \

# zoom in top center
zi_top_center="scale=-2:10*ih,\
zoompan=z='min(zoom+0.0015,1.5)':\
fps=${infps}:d=${infps}*${dur}:\
x='iw/2-(iw/zoom/2)',\
scale=-2:${imgheight}" \

# zoom in top right
zi_top_right="scale=-2:10*ih,\
zoompan=z='min(zoom+0.0015,1.5)':\
fps=${infps}:d=${infps}*${dur}:\
x='iw/zoom-(iw/zoom/2)',\
scale=-2:${imgheight}" \

### zoom out positions

# zoom out top left
zo_top_left="scale=-2:2*ih,\
zoompan=z='if(lte(zoom,1.0),1.5,max(1.001,zoom-0.0015))':\
fps=${infps}:d=${infps}*${dur},\
scale=-2:${imgheight}" \

zo_center="scale=-2:2*ih,\
zoompan=z='if(lte(zoom,1.0),1.5,max(1.001,zoom-0.0015))':\
fps=${infps}:d=${infps}*${dur}:\
x='iw/2-(iw/zoom/2)':y='ih/2-(ih/zoom/2)',\
scale=-2:${imgheight}" \

# zoom out top center
zo_top_center="scale=-2:2*ih,\
zoompan=z='if(lte(zoom,1.0),1.5,max(1.001,zoom-0.0015))':\
fps=${infps}:d=${infps}*${dur}:\
x='iw/2-(iw/zoom/2)',\
scale=-2:${imgheight}" \

# zoom out top right
zo_top_right="scale=-2:2*ih,\
zoompan=z='if(lte(zoom,1.0),1.5,max(1.001,zoom-0.0015))':\
fps=${infps}:d=${infps}*${dur}:\
x='iw/zoom-(iw/zoom/2)',\
scale=-2:${imgheight}" \

# zoom out bottom left
zo_bottom_left="scale=-2:2*ih,\
zoompan=z='if(lte(zoom,1.0),1.5,max(1.001,zoom-0.0015))':\
fps=${infps}:d=${infps}*${dur}:\
y='ih-ih/zoom',\
scale=-2:${imgheight}" \

# zoom out bottom right
zo_bottom_right="scale=-2:2*ih,\
zoompan=z='if(lte(zoom,1.0),1.5,max(1.001,zoom-0.0015))':\
fps=${infps}:d=${infps}*${dur}:\
x='iw-iw/zoom':\
y='ih-ih/zoom',\
scale=-2:${imgheight}" \


# check the files mime type is a image
case "${filetype}" in
    ${png_mime}|${jpg_mime});;
    *) { echo "${infile} ${NOT_MEDIA_FILE_ERR}" && usage; };;
esac

### zoom function
zoom_func () {
  ffmpeg \
  -hide_banner \
  -stats -v panic \
  -r 30 \
  -i "${infile}" \
  -filter_complex \
  "${1}" \
  -y -shortest \
  -c:v libx264 -crf 18 -profile:v high \
  -r 30 -pix_fmt yuv420p \
  -movflags +faststart -f mp4 \
  "${outfile}"
}

# check zoom and position
case "${zoom}" in
    in)
	case "${position}" in
          tl) zoom_func "${zi_top_left}" "${infile}";;
          tc) zoom_func "${zi_top_center}" "${infile}";;
          c) zoom_func "${zi_center}" "${infile}";;
          tr) zoom_func "${zi_top_right}" "${infile}";;
	  *) help;;
	esac
	;;
    out)
	case "${position}" in
          tl) zoom_func "${zo_top_left}" "${infile}";;
          tc) zoom_func "${zo_top_center}" "${infile}";;
          c) zoom_func "${zo_center}" "${infile}";;
          tr) zoom_func "${zo_top_right}" "${infile}";;
          bl) zoom_func "${zo_bottom_left}" "${infile}";;
          br) zoom_func "${zo_bottom_right}" "${infile}";;
	  *) help;;
	esac
	;;
    *) { echo "${infile} ${NOT_MEDIA_FILE_ERR}" && usage; };;
esac
