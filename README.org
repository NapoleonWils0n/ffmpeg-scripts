#+STARTUP: content
#+OPTIONS: num:nil author:nil

* ffmpeg scripts

A collection of ffmpeg shell scripts for basic editing tasks


+ [[#audio-silence][audio-silence]]
+ [[#combine-clips][combine-clips]]
+ [[#correct-clip][correct-clip]]
+ [[#ebu-meter][ebu-meter]]
+ [[#extract-frame][extract-frame]]
+ [[#fade-clip][fade-clip]]
+ [[#fade-normalize][fade-normalize]]
+ [[#fade-title][fade-title]]
+ [[#img2video][img2video]]
+ [[#loudnorm][loudnorm]]
+ [[#normalize][normalize]]
+ [[#overlay-clip][overlay-clip]]
+ [[#sub2transcript][subs2transcript]]
+ [[#subtitle-add][subtitle-add]]
+ [[#trim-clip][trim-clip]]
+ [[#waveform][waveform]]
+ [[#xfade-clips][xfade-clips]]
+ [[#zoompan][zoompan]]

** scripts install

*** create a bin directory

create a bin directory in your home to add the scripts to

#+BEGIN_SRC sh
mkdir -p ~/bin
#+END_SRC

add the following code to your ~/.bashrc or ~/.zhrc file

#+BEGIN_SRC sh
if [ -d "$HOME/bin" ]; then
   PATH="$HOME/bin:$PATH"
fi
#+END_SRC

+ source your ~/.bashrc if you are using the bash shell

#+BEGIN_SRC sh
source ~/.bashrc
#+END_SRC

+ source your ~/.zshrc if you are using the zsh shell

#+BEGIN_SRC sh
source ~/.zshrc
#+END_SRC

*** clone the git repository

create a git directory in you home folder to download the scripts into,
or use any other location in your file system

#+BEGIN_SRC sh
mkdir -p ~/git
#+END_SRC

change directory in the git directory

#+BEGIN_SRC sh
cd ~/git
#+END_SRC

clone the git repository

#+BEGIN_SRC sh
git clone https://github.com/NapoleonWils0n/ffmpeg-scripts.git
#+END_SRC

update the scripts using git pull

*** copy or symlink scripts into the bin directory

you can now either copy the scripts into the ~/bin directory in your home,
or create symbolic links from the scripts in the ~/git/ffmpeg-scripts directory to the ~/bin directory

creating a symbolic link

#+BEGIN_SRC sh
ln -s path/to/source path/to/destination
#+END_SRC

example

#+BEGIN_SRC sh
ln -s ~/git/ffmpeg-scripts/trim-clip ~/bin
#+END_SRC

*** ffmpeg install

**** linux ffmpeg install

install ffmpeg on debian or ubuntu,
for other linux distros see the documentation for your package manager

#+BEGIN_SRC sh
sudo apt install ffmpeg
#+END_SRC

**** mac ffmpeg install

open a terminal and run the following commands to install the xcode command line tools, homebrew and ffmpeg

+ xcode command line tools install

#+BEGIN_SRC sh
xcode-select --install
#+END_SRC

+ homebrew install
  
#+BEGIN_SRC sh
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
#+END_SRC

+ ffmpeg install with libfdk_aac
  
#+BEGIN_SRC sh
brew tap homebrew-ffmpeg/ffmpeg
brew install homebrew-ffmpeg/ffmpeg/ffmpeg --with-fdk-aac --HEAD
#+END_SRC

+ ffmpeg upgrade

#+BEGIN_SRC sh
brew update && brew upgrade homebrew-ffmpeg/ffmpeg/ffmpeg --fetch-HEAD
#+END_SRC
 
**** freebsd ffmpeg install

switch to root and install the ffmpeg package

#+BEGIN_SRC sh
pkg install ffmpeg
#+END_SRC

you can also install ffmpeg from ports,
or use poudriere to build the ffmpeg package

note the ebumeter script uses ffplay which isnt installed with the ffmpeg package,
so you need to build ffmpeg with the sdl option enable from ports or with poudriere

if you want to use the libfdk_aac audio you should also enable that option when building
the ffmpeg port, and build the lame package for mp3 support

**** windows ffmpeg install

install the windows subsystem for linux and then install a linux distro like ubuntu,
then follow the linux install instructions
 
** audio-silence
:PROPERTIES:
:CUSTOM_ID: audio-silence
:END:

audio-silence add silent audio to a video clip

If the video doesnt have an audio track the script copies the video track,
and adds a silent audio track to match the duration of the video and creates a new video clip

If the video has a video and audio track the script only copies the video track,
and adds a silent audio track to match the duration of the video and creates a new video clip.

+ script usage

#+BEGIN_SRC sh
audio-silence -i infile.(mp4|mkv|mov|m4v) -c (mono|stereo) -r (44100|48000) -o outfile.mp4
#+END_SRC

#+BEGIN_EXAMPLE
-i infile.(mp4|mkv|mov|m4v)
-c (mono|stereo) : optional agument # default is mono
-r (44100|48000) : optional agument # default is 44100
-o outfile.mp4   : optional agument # default is infile-name-silence-date-time
#+END_EXAMPLE

*** audio-silence batch process

Batch process files in the current working directory
  
Note we omit the -o option to use the default outfile name,
which is infile-name-silence-date-time

audio-silence batch process without specifying the -c and -r options
using the defaults of -c mono and -r 44100

#+BEGIN_SRC sh
find -s . -type f -name "*.mp4" -exec sh -c \
'audio-silence -i "${0}"'     
"{}" \;
#+END_SRC

audio-silence batch process and override the defaults
with the -c and -r options

#+BEGIN_SRC sh
find -s . -type f -name "*.mp4" -exec sh -c \
'audio-silence -i "${0}" -c stereo -r 48000'     
"{}" \;
#+END_SRC

** combine-clips
:PROPERTIES:
:CUSTOM_ID: combine-clips
:END:

combine an image or video file with an audio clip

+ script usage

#+BEGIN_SRC sh
combine-clip -i infile.(mp4|mov|mkv|m4v|png|jpg) -a audio.(m4a|aac|wav|mp3) -o outfile.mp4
#+END_SRC

#+BEGIN_EXAMPLE
-i infile.(mp4|mkv|mov|m4v|png|jpg)
-a audio.(m4a|aac|wav|mp3)
-o outfile.mp4 : optional agument # defaults is infile-name-combined-date-time
#+END_EXAMPLE

*** combine-clips batch process

Batch process files in the current working directory
  
Note we omit the -o option to use the default outfile name,
infile-name-combined-date-time

+ batch combine video and audio files into video clips

The video and audio files you want to combine must have the same name

for example

#+BEGIN_EXAMPLE
file1.mp4
file1.wav
file2.mp4
file2.wav
#+END_EXAMPLE

running the following code will combine
file1.mp4 with file1.wav and 
file2.mp4 with file2.wav

#+BEGIN_SRC sh
find -s . -type f -name "*.mp4" -exec sh -c \
'combine-clip -i "${0}" -a "${0%.*}.wav"' \
"{}" \;
#+END_SRC

+ batch combine images and audio files into video clips

The images and audio files you want to combine must have the same name

for example

#+BEGIN_EXAMPLE
file1.png
file1.wav
file2.png
file2.wav
#+END_EXAMPLE

running the following code will combine
file1.png with file1.wav and 
file2.png with file2.wav

#+BEGIN_SRC sh
find -s . -type f -name "*.png" -exec sh -c \
'combine-clip -i "${0}" -a "${0%.*}.wav"' \
"{}" \;
#+END_SRC

** correct-clip
:PROPERTIES:
:CUSTOM_ID: correct-clip
:END:

+ curves code based on:
[[https://video.stackexchange.com/questions/16352/converting-gimp-curves-files-to-photoshop-acv-for-ffmpeg/20005#20005][converting gimp curves files for ffmpeg]]

correct a video clip by using a gimp curve converted into a ffmpeg curves filter command,
to adjust the levels and white balance

+ requires a curve file created with the following script
[[https://github.com/NapoleonWils0n/curve2ffmpeg][curve2ffmpeg]]

+ script usage

#+BEGIN_SRC sh
correct-clip -i infile.(mp4|mkv|mov|m4v) -c curve.txt -o outfile.mp4
#+END_SRC

#+BEGIN_EXAMPLE
-i infile.(mp4|mkv|mov|m4v)
-c curve.txt
-o outfile.mp4 :optional agument # default is infile-name-corrected-date-time
#+END_EXAMPLE

*** correct-clip batch process

Batch process files in the current working directory
  
Note we omit the -o option to use the default outfile name,
infile-name-corrected-date-time

The video and gimp curve text files you want to combine must have the same name

for example

#+BEGIN_EXAMPLE
file1.mp4
file1.txt
file2.mp4
file2.txt
#+END_EXAMPLE

running the following code will correct
file1.mp4 with file1.txt gimp curve file and
file2.mp4 with file2.txt gimp curve file

#+BEGIN_SRC sh
find -s . -type f -name "*.mp4" -exec sh -c \
'correct-clip -i "${0}" -c "${0%.*}.txt"' \
"{}" \;
#+END_SRC

** ebu-meter
:PROPERTIES:
:CUSTOM_ID: ebu-meter
:END:

ffplay ebu meter

+ script usage

#+BEGIN_SRC sh
ebu-meter -i infile.(mp4|mov|mkv|m4v|m4a|aac|wav|mp3)
#+END_SRC

** extract-frame
:PROPERTIES:
:CUSTOM_ID: extract-frame
:END:

extract a frame from a video and save as a png image

+ script usage

#+BEGIN_SRC sh
extract-frame -i infile.(mp4|mov|mkv|m4v) -s 00:00:00 -o outfile.mp4
#+END_SRC

#+BEGIN_EXAMPLE
-i infile.(mp4|mov|mkv|m4v)
-s 00:00:00    : optional argument # default is 00:00:00
-o outfile.png : optional agument # default is infile-name-frame-date-time
#+END_EXAMPLE

*** extract-frame batch process

Batch process files in the current working directory
  
Note we omit the -o option to use the default outfile name,
infile-name-frame-date-time

+ extract frame with default option of 00:00:00

#+BEGIN_SRC sh
find -s . -type f -name "*.mp4" -exec sh -c \
'extract-frame -i "${0}"' \
"{}" \;
#+END_SRC

+ extract frame at 30 seconds into the video

#+BEGIN_SRC sh
find -s . -type f -name "*.mp4" -exec sh -c \
'extract-frame -i "${0}" -s 00:00:30' \
"{}" \;
#+END_SRC

** fade-clip
:PROPERTIES:
:CUSTOM_ID: fade-clip
:END:

fade video and audio in and out

+ script usage

#+BEGIN_SRC sh
fade-clip -i video.(mp4|mkv|mov|m4v) -d (0.[0-9]|1) -o outfile.mp4
#+END_SRC

#+BEGIN_EXAMPLE
-i infile.(mp4|mkv|mov|m4v)
-d (0.[0-9]|1) : optional agument # default is 0.5
-o outfile.mp4 : optional agument # default is infile-name-fade-date-time
#+END_EXAMPLE

*** fade-clip batch process

Batch process files in the current working directory
  
Note we omit the -o option to use the default outfile name,
infile-name-fade-date-time

+ fade-clip with default option of 0.5

#+BEGIN_SRC sh
find -s . -type f -name "*.mp4" -exec sh -c \
'fade-clip -i "${0}"' \
"{}" \;
#+END_SRC

+ fade-clip and override the default option of 0.5 with -d 1 for a 1 second fade

#+BEGIN_SRC sh
find -s . -type f -name "*.mp4" -exec sh -c \
'fade-clip -i "${0}" -d 1' \
"{}" \;
#+END_SRC

** fade-normalize
:PROPERTIES:
:CUSTOM_ID: fade-normalize
:END:

fade video and audio in and out and normalize

+ script usage

#+BEGIN_SRC sh
fade-normalize -i video.(mp4|mkv|mov|m4v) -d (0.[0-9]|1) -o outfile.mp4
#+END_SRC

#+BEGIN_EXAMPLE
-i infile.(mp4|mkv|mov|m4v)
-d (0.[0-9]|1) : optional agument # default is 0.5
-o outfile.mp4 : optional agument # default is infile-name-normalized-date-time
#+END_EXAMPLE

*** fade-normalize batch process

Batch process files in the current working directory
  
#+BEGIN_SRC sh
find -s . -type f -name "*.mp4" -exec sh -c \
'fade-normalize -i "${0}" -d 0.5' \
"{}" \;
#+END_SRC

** fade-title
:PROPERTIES:
:CUSTOM_ID: fade-title
:END:

fade video and audio in and out, 
normalize the audio and create video a lower third title from the filename

+ script usage

#+BEGIN_SRC sh
fade-title -i infile.(mp4|mkv|mov|m4v) -d (0.[0-9]|1) -s 000 -e 000 -o outfile.mp4
#+END_SRC

#+BEGIN_EXAMPLE
-i infile.(mp4|mkv|mov|m4v)
-d (0.[0-9]|1) : from 0.1 to 0.9 or 1 : optional agument # default is 0.5
-s 000         : from 000 to 999
-e 000         : from 000 to 999
-o outfile.mp4 : optional agument # default is infile-name-title-date-time
#+END_EXAMPLE

*** fade-title batch process

Batch process files in the current working directory
  
#+BEGIN_SRC sh
find -s . -type f -name "*.mp4" -exec sh -c \
'fade-title -i "${0}" -d 0.5 -s 10 -e 20' \
"{}" \;
#+END_SRC

** img2video
:PROPERTIES:
:CUSTOM_ID: img2video
:END:

convert an image into a video file

+ script usage

#+BEGIN_SRC sh
img2video -i infile.(png|jpg|jpeg) -d (000) -o outfile.mp4
#+END_SRC

#+BEGIN_EXAMPLE
-i infile.(mp4|mkv|mov|m4v)
-d (000)       : duration
-o outfile.mp4 : optional agument # default is infile-name-video-date-time
#+END_EXAMPLE

*** img2video batch process

Batch process files in the current working directory
  
Note we omit the -o option to use the default outfile name,
infile-name-video-date-time

Batch convert png in the current directory into video clips with a 30 second duration

#+BEGIN_SRC sh
find -s . -type f -name "*.png" -exec sh -c \
'img2video -i "${0}" -d 30' \
"{}" \;
#+END_SRC

** loudnorm
:PROPERTIES:
:CUSTOM_ID: loudnorm
:END:

ffmpeg loudnorm 

+ script usage

#+BEGIN_SRC sh
loudnorm -i infile.(mkv|mp4|mov|m4v|m4a|aac|wav|mp3)
#+END_SRC

** normalize
:PROPERTIES:
:CUSTOM_ID: normalize
:END:

normalize audio levels

+ script usage

#+BEGIN_SRC sh
normalize -i infile.(mp4|mkv|mov|m4v|aac|m4a|wav|mp3) -o outfile.(mp4|mkv|mov|m4v|aac|m4a|wav|mp3)
#+END_SRC

#+BEGIN_EXAMPLE
-i infile.(mp4|mkv|mov|m4v|aac|m4a|wav|mp3)
-o outfile.(mp4|mkv|mov|m4v|aac|m4a|wav|mp3) : optional agument # default is infile-name-normalize-date-time-extension
#+END_EXAMPLE

*** normalize batch process

Batch process files in the current working directory
  
Note we omit the -o option to use the default outfile name,
infile-name-normalize-date-time

Batch normalize mp4 videos in the current directory

#+BEGIN_SRC sh
find -s . -type f -name "*.mp4" -exec sh -c \
'normalize -i "${0}"' \
"{}" \;
#+END_SRC

** overlay-clip
:PROPERTIES:
:CUSTOM_ID: overlay-clip
:END:

overlay one video clip on top of another video clip

+ script usage

#+BEGIN_SRC sh
overlay-clip -i infile.(mp4|mkv|mov|m4v) -v infile.(mp4|mkv|mov|m4v) -p [0-999] -o oufile.mp4
#+END_SRC

#+BEGIN_EXAMPLE
+ -i infile.(mp4|mkv|mov|m4v) : bottom video
+ -v infile.(mp4|mkv|mov|m4v) : overlay video
+ -p [0-999]                  : time to overlay the video
+ -o outfile.mp4              : optional agument # default is infile-name-overlay-date-time
#+END_EXAMPLE

** subtitle-add
:PROPERTIES:
:CUSTOM_ID: subtitle-add
:END:

add subtitles to a video file

+ script usage

#+BEGIN_SRC sh
subtitle-add -i video.(mp4|mov|mkv|m4v) -s subtitle.srt -o outfile.mp4
#+END_SRC

#+BEGIN_EXAMPLE
-i infile.(mp4|mkv|mov|m4v)
-s subtitle.srt
-o outfile.mp4 : optional agument # default is infile-name-subs-date-time
#+END_EXAMPLE

*** subtitle-add batch process

Batch process files in the current working directory
  
Note we omit the -o option to use the default outfile name,
infile-name-subs-date-time

The video and subtitle files you want to combine must have the same name

for example

#+BEGIN_EXAMPLE
file1.mp4
file1.srt
file2.mp4
file2.srt
#+END_EXAMPLE

running the following code will run the subtitle-add script and combine
file1.mp4 with file1.srt and 
file2.mp4 with file2.srt

#+BEGIN_SRC sh
find -s . -type f -name "*.mp4" -exec sh -c \
'subtitle-add -i "${0}" -s "${0%.*}.srt"' \
"{}" \;
#+END_SRC

** trim-clip
:PROPERTIES:
:CUSTOM_ID: trim-clip
:END:

trim video clip

+ script usage

#+BEGIN_SRC sh
trim-clip -s 00:00:00 -i infile.(mp4|mov|mkv|m4v|aac|m4a|wav|mp3) \
-t 00:00:00 -o outfile.(mp4|aac|mp3|wav)
#+END_SRC

#+BEGIN_EXAMPLE
-s 00:00:00 : start time
-i infile.(mp4|mov|mkv|m4v|aac|m4a|wav|mp3)
-t 00:00:00                  : number of seconds after start time
-o outfile.(mp4|aac|mp3|wav) : optional agument # default infile-name-trimmed-date-time.(mp4|aac|mp3|wav)
#+END_EXAMPLE

*** trim-clip batch process

Batch process files in the current working directory
  
Note we omit the -o option to use the default outfile name,
infile-name-trimmed-date-time

Batch trim all the mp4 files in the current directory,
from 00:00:00 to 00:00:30

#+BEGIN_SRC sh
find -s . -type f -name "*.mp4" -exec sh -c \
'trim-clip -s 00:00:00 -i "${0}" -t 00:00:30' \
"{}" \;
#+END_SRC

** waveform
:PROPERTIES:
:CUSTOM_ID: waveform
:END:

create a waveform from an audio or video file and save as a png

+ script usage

#+BEGIN_SRC sh
waveform -i infile.(mp4|mkv|mov|m4v|wav|aac|m4a|mp3) -o oufile.png
#+END_SRC

#+BEGIN_EXAMPLE
-i infile.(mp4|mkv|mov|m4v|aac|m4a|wav|mp3)
-o outfile.png : optional agument # default is infile-name-waveform-date-time
#+END_EXAMPLE

*** waveform batch process

Batch process files in the current working directory
  
Note we omit the -o option to use the default outfile name,
infile-name-waveform-date-time

Create waveform images from all the mp4 fies in the current directory

#+BEGIN_SRC sh
find -s . -type f -name "*.mp4" -exec sh -c \
'waveform -i "${0}"' \
"{}" \;
#+END_SRC

** xfade-clips
:PROPERTIES:
:CUSTOM_ID: xfade-clips
:END:

cross fade 2 video clips with either a 1 or 2 second cross fade
the videos must have the same codecs, size and frame rate

+ script usage

#+BEGIN_SRC sh
xfade-clips -a clip1.(mp4|mkv|mov|m4v) -b clip2.(mp4|mkv|mov|m4v) -d (1|2) -o outfile.mp4
#+END_SRC

#+BEGIN_EXAMPLE
-a clip1.(mp4|mkv|mov|m4v) : first clip
-b clip2.(mp4|mkv|mov|m4v) : second clip
-d (1|2)                   : cross fade duration :optional agument # default is 1 second
-o outfile.mp4             : optional agument # default is infile-name-xfade-date-time
#+END_EXAMPLE

** zoompan
:PROPERTIES:
:CUSTOM_ID: zoompan
:END:

convert a image to video and apply ken burns style zoom into center

+ script usage

#+BEGIN_SRC sh
zoompan -i infile.(png|jpg|jpeg) -d (000) -z (in|out) -p (tl|c|tc|tr|bl|br) -o outfile.mp4"
#+END_SRC

#+BEGIN_EXAMPLE
-i infile.(png|jpg|jpeg)
-d duration    : from 1-999
-z zoom        : in or out
-p position    : zoom to location listed below
-o outfile.mp4 : optional agument # default is infile-name-zoompan-date-time
#+END_EXAMPLE

#+BEGIN_SRC sh
+------------------------------+
+tl            tc            tr+
+                              +        
+              c               +
+                              +
+bl                          br+
+------------------------------+
#+END_SRC

*** zoompan batch process

Batch process files in the current working directory
  
Note we omit the -o option to use the default outfile name,
infile-name-zoompan-date-time

Batch process all the png files in the current working directory,
apply the zoompan script with a 5 second duration, zoom in to the center of the image

#+BEGIN_SRC sh
find -s . -type f -name "*.png" -exec sh -c \
'zoompan -i "${0}" -d 5 -z in -p c' \
"{}" \;
#+END_SRC
