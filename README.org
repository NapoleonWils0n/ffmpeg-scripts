#+STARTUP: content
#+OPTIONS: num:nil author:nil

* ffmpeg scripts

A collection of ffmpeg posix shell scripts for basic editing tasks

+ audio-silence
+ combine-clips
+ correct-clip
+ ebu-meter
+ fade-clip
+ fade-normalize
+ fade-title
+ img2video
+ loudnorm
+ normalize
+ sub2transcript
+ subtitle-add
+ trim-clip
+ waveform
+ xfade-clips
+ zoompan
  
** scripts install

*** create a bin directory

create a bin directory in your home to add the scripts to

#+BEGIN_SRC sh
mkdir -p ~/bin
#+END_SRC

add the following code to your ~/.bashrc or ~/.zhrc file

#+BEGIN_SRC sh
if [ -d "$HOME/bin" ]; then
   PATH="$HOME/bin:$PATH"
fi
#+END_SRC

+ source your ~/.bashrc if you are using the bash shell

#+BEGIN_SRC sh
source ~/.bashrc
#+END_SRC

+ source your ~/.zshrc if you are using the zsh shell

#+BEGIN_SRC sh
source ~/.zshrc
#+END_SRC

*** clone git repo

create a git directory in you home folder to download the scripts into,
or use any other location in your file system

#+BEGIN_SRC sh
mkdir -p ~/git
#+END_SRC

change directory in the git directory

#+BEGIN_SRC sh
cd ~/git
#+END_SRC

clone the git repository

#+BEGIN_SRC sh
git clone https://github.com/NapoleonWils0n/ffmpeg-scripts.git
#+END_SRC

update the scripts using git pull

*** copy or symlink scripts into the bin directory

you can now either copy the scripts into the ~/bin directory in your home,
or create symbolic links from the scripts in the ~/git/ffmpeg-scripts directory to the ~/bin directory

creating a symbolic link

#+BEGIN_SRC sh
ln -s path/to/source path/to/destination
#+END_SRC

example

#+BEGIN_SRC sh
ln -s ~/git/ffmpeg-scripts/trim-clip ~/bin
#+END_SRC

*** ffmpeg install

**** linux ffmpeg install

install ffmpeg on debian or ubuntu,
for other linux distros see the documentation for your package manager

#+BEGIN_SRC sh
sudo apt install ffmpeg
#+END_SRC

**** mac ffmpeg install

open a terminal and run the following commands to install the xcode command line tools, homebrew and ffmpeg

+ xcode command line tools install

#+BEGIN_SRC sh
xcode-select --install
#+END_SRC

+ homebrew install
  
#+BEGIN_SRC sh
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
#+END_SRC

+ ffmpeg install
  
#+BEGIN_SRC sh
brew install ffmpeg
#+END_SRC
 
**** freebsd ffmpeg install

switch to root and install the ffmpeg package

#+BEGIN_SRC sh
pkg install ffmpeg
#+END_SRC

you can also install ffmpeg from ports,
or use poudriere to build the ffmpeg package

note the ebumeter script uses ffplay which isnt installed with the ffmpeg package,
so you need to build ffmpeg with the sdl option enable from ports or with podriere

**** windows ffmpeg install

install the windows subsystem for linux and then install a linux distro like ubuntu,
then follow the linux install instructions

** audio-silence

audio-silence add silent audio to a video clip

If the video doesnt have an audio track the script copies the video track,
and adds a silent audio track to match the duration of the video and creates a new video clip

If the video has a video and audio track the script only copies the video track,
and adds a silent audio track to match the duration of the video and creates a new video clip.

+ script usage

#+BEGIN_SRC sh
audio-silence -i infile.(mp4|mkv|mov|m4v) -c (mono|stereo) -r (44100|48000) -o outfile.mp4
#+END_SRC

+ -i infile.(mp4|mkv|mov|m4v)
+ -c (mono|stereo) :optional agument # default is mono
+ -r (44100|48000) :optional agument # default is 44100
+ -o outfile.mp4   :optional agument # default is infile-name-silence-date-time

** combine-clips

combine video and audio files into new clip

+ script usage

#+BEGIN_SRC sh
combine-clip -v video.(mp4|mov|mkv|m4v) -a audio.(m4a|aac|wav|mp3) -o outfile.mp4
#+END_SRC

+ -v infile.(mp4|mkv|mov|m4v)
+ -a audio.(m4a|aac|wav|mp3)
+ -o outfile.mp4 :optional agument # defaults is infile-name-combined-date-time

** correct-clip

+ curves code based on:
[[https://video.stackexchange.com/questions/16352/converting-gimp-curves-files-to-photoshop-acv-for-ffmpeg/20005#20005][converting gimp curves files for ffmpeg]]

correct a video clip by using a gimp curve converted into a ffmpeg curves filter command,
to adjust the levels and white balance

+ requires a curve file created with the following script
[[https://github.com/NapoleonWils0n/curve2ffmpeg][curve2ffmpeg]]

+ script usage

#+BEGIN_SRC sh
correct-clip -i infile.(mp4|mkv|mov|m4v) -c curve.txt -o outfile.mp4
#+END_SRC

+ -i infile.(mp4|mkv|mov|m4v)
+ -c curve.txt
+ -o outfile.mp4 :optional agument # default is infile-name-corrected-date-time

** ebu-meter

ffplay ebu meter

+ script usage

#+BEGIN_SRC sh
ebu-meter -i infile.(mp4|mov|mkv|m4v|m4a|aac|wav|mp3)
#+END_SRC

** extract-frame

extract a frame from a video and save as a png image

+ script usage

#+BEGIN_SRC sh
extract-frame -i infile.(mp4|mov|mkv|m4v) -s 00:00:00 -o outfile.mp4
#+END_SRC

+ -i infile.(mp4|mov|mkv|m4v)
+ -s 00:00:00    :optional argument # default is 00:00:00
+ -o outfile.png :optional agument # default is infile-name-frame-date-time

** fade-clip

fade video and audio in and out

+ script usage

#+BEGIN_SRC sh
fade-clip -i video.(mp4|mkv|mov|m4v) -d (0.[0-9]|1) -o outfile.mp4
#+END_SRC

+ -i infile.(mp4|mkv|mov|m4v)
+ -d (0.[0-9]|1) :optional agument # default is 0.5
+ -o outfile.mp4 :optional agument # default is infile-name-fade-date-time

** fade-normalize

fade video and audio in and out and normalize

+ curves code based on:
[[https://video.stackexchange.com/questions/16352/converting-gimp-curves-files-to-photoshop-acv-for-ffmpeg/20005#20005][converting gimp curves files for ffmpeg]]

correct a video clip by using a gimp curve converted into a ffmpeg curves filter command,
to adjust the levels and white balance

+ requires a curve file created with the following script
[[https://github.com/NapoleonWils0n/curve2ffmpeg][curve2ffmpeg]]

+ script usage

#+BEGIN_SRC sh
fade-normalize -i video.(mp4|mkv|mov|m4v) -d (0.[0-9]|1) -c curve.txt -o outfile.mp4
#+END_SRC

+ -d (0.[0-9]|1) :optional agument # default is 0.5
+ -o outfile.mp4   :optional agument # default is infile-name-normalized-date-time

** fade-title

fade video and audio in and out, 
normalize and create vide title from filename

+ curves code based on:
[[https://video.stackexchange.com/questions/16352/converting-gimp-curves-files-to-photoshop-acv-for-ffmpeg/20005#20005][converting gimp curves files for ffmpeg]]

correct a video clip by using a gimp curve converted into a ffmpeg curves filter command,
to adjust the levels and white balance

+ requires a curve file created with the following script
[[https://github.com/NapoleonWils0n/curve2ffmpeg][curve2ffmpeg]]

+ script usage

#+BEGIN_SRC sh
fade-title -i infile.(mp4|mkv|mov|m4v) -d (0.[0-9]|1) -s 000 -e 000 -c curve.txt -o outfile.mp4
#+END_SRC

+ -i infile.(mp4|mkv|mov|m4v)
+ -d (0.[0-9]|1) : from 0.1 to 0.9 or 1 :optional agument # default is 0.5
+ -s 000         : from 000 to 999
+ -e 000         : from 000 to 999
+ -c curve.txt
+ -o outfile.mp4 :optional agument # default is infile-name-title-date-time

** img2video

convert an image to a video file

+ script usage

#+BEGIN_SRC sh
img2video -i infile.(png|jpg|jpeg) -d (000) -o outfile.mp4
#+END_SRC

+ -i infile.(mp4|mkv|mov|m4v)
+ -d (000)       : duration
+ -o outfile.mp4 :optional agument # default is infile-name-silence-date-time

** loudnorm

ffmpeg loudnorm 

+ script usage

#+BEGIN_SRC sh
loudnorm -i infile.(mkv|mp4|mov|m4v|m4a|aac|wav|mp3)
#+END_SRC

** normalize

normalize audio levels

+ script usage

#+BEGIN_SRC sh
normalize -i infile.(mp4|mkv|mov|m4v|aac|m4a|wav|mp3)
#+END_SRC

+ -i infile.(mp4|mkv|mov|m4v|aac|m4a|wav|mp3)
+ -o outfile.(mp4|mkv|mov|m4v|aac|m4a|wav|mp3) :optional agument # default is infile-name-silence-date-time-extension

** overlay-clip

overlay one video clip on top of another video clip

+ script usage

#+BEGIN_SRC sh
overlay-clip -i infile.(mp4|mkv|mov|m4v) -v infile.(mp4|mkv|mov|m4v) -p [0-999] -o oufile.mp4
#+END_SRC

+ -i infile.(mp4|mkv|mov|m4v) : bottom video
+ -v infile.(mp4|mkv|mov|m4v) : overlay video
+ -p [0-999]                  : time to overlay the video
+ -o outfile.mp4              : optional agument # default is infile-name-overlay-date-time

** subs2transcript

convert a subtitle file to a text transcript

+ script usage

#+BEGIN_SRC sh
subs2transcript -i infile.(srt|vtt) -o outfile.txt
#+END_SRC

** subtitle-add

add subtitles to a video file

+ script usage

#+BEGIN_SRC sh
subtitle-add -i video.(mp4|mov|mkv|m4v) -s subtitle.srt -o outfile.mp4
#+END_SRC

+ -i infile.(mp4|mkv|mov|m4v)
+ -s subtitle.srt
+ -o outfile.mp4 :optional agument # default is infile-name-silence-date-time

** trim-clip

trim video clip

+ script usage

#+BEGIN_SRC sh
trim-clip -s 00:00:00 -i infile.(mp4|mov|mkv|m4v|aac|m4a|wav|mp3) \
-t 00:00:00 -o outfile.(mp4|aac|mp3|wav)
#+END_SRC

+ -s 00:00:00 : start time
+ -i infile.(mp4|mov|mkv|m4v|aac|m4a|wav|mp3)
+ -t 00:00:00 : number of seconds after start time
+ -o outfile.(mp4|aac|mp3|wav) :optional agument # default infile-name-trimmed-date-time.(mp4|aac|mp3|wav)

** waveform

create a waveform from an audio or video file and save as a png

+ script usage

#+BEGIN_SRC sh
waveform -i infile.(mp4|mkv|mov|m4v|wav|aac|m4a|mp3) -o oufile.png
#+END_SRC

+ -i infile.(mp4|mkv|mov|m4v|aac|m4a|wav|mp3)
+ -o outfile.png :optional agument # default is infile-name-waveform-date-time

** xfade-clips

cross fade 2 video clips with either a 1 or 2 second cross fade
the videos must have the same codecs, size and frame rate
+ script usage

#+BEGIN_SRC sh
xfade-clips -a clip1.(mp4|mkv|mov|m4v) -b clip2.(mp4|mkv|mov|m4v) -d (1|2) -o outfile.mp4
#+END_SRC

+ -a clip1.(mp4|mkv|mov|m4v) : first clip
+ -b clip2.(mp4|mkv|mov|m4v) : second clip
+ -d (1|2)                   : cross fade duration :optional agument # default is 1 second
+ -o outfile.mp4             : optional agument # default is infile-name-xfade-date-time

** zoompan

convert a image to video and apply ken burns style zoom into center

+ script usage

#+BEGIN_SRC sh
zoompan -i infile.(png|jpg|jpeg) -d (000) -z (in|out) -p (tl|c|tc|tr|bl|br) -o outfile.mp4"
#+END_SRC

+ -i infile.(png|jpg|jpeg)
+ -d duration : from 1-999
+ -z zoom : in or out
+ -p position : zoom to location listed below
+ -o outfile.mp4             : optional agument # default is infile-name-zoompan-date-time

#+BEGIN_SRC sh
+------------------------------+
+tl            tc            tr+
+                              +        
+              c               +
+                              +
+bl                          br+
+------------------------------+
#+END_SRC
