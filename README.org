#+STARTUP: content
#+OPTIONS: num:nil author:nil

* ffmpeg scripts

A collection of ffmpeg shell scripts

+ combine-clips
+ ebu-meter
+ fade-clip
+ fade-normalize
+ fade-title
+ loudnorm
+ normalize
+ subtitle-add
+ trim-clip
+ waveform

** combine-clips

combine video and audio files into new clip

+ script usage

#+BEGIN_SRC sh
combine-clip -v video.(mp4|mov|mkv|m4v) -a audio.(m4a|aac|wav|mp3)
#+END_SRC

** ebu-meter

ffplay ebu meter

+ script usage

#+BEGIN_SRC sh
ebu-meter -i infile.(mp4|mov|mkv|m4v|m4a|aac|wav|mp3)
#+END_SRC

** fade-clip

fade video and audio in and out

+ script usage

#+BEGIN_SRC sh
fade-clip -i video.(mp4|mkv|mov|m4v) -d (0.[0-9]|1)
#+END_SRC

-d = duration from 0.1 to 1

** fade-normalize

fade video and audio in and out and normalize

+ script usage

#+BEGIN_SRC sh
fade-normalize -i video.(mp4|mkv|mov|m4v) -d (0.[0-9]|1)
#+END_SRC

-d = duration from 0.1 to 1

** fade-title

fade video and audio in and out, 
normalize and create vide title from filename

+ script usage

#+BEGIN_SRC sh
fade-title -i video.(mp4|mkv|mov|m4v) -d (0.[0-9]|1)
#+END_SRC

-d = duration from 0.1 to 1

** kenburns

convert image to video and apply ken burns style zoom into center

+ script usage

#+BEGIN_SRC sh
kenburns -i image.(png|jpg|jpeg) -d (000)
#+END_SRC

** loudnorm

ffmpeg loudnorm 

+ script usage

#+BEGIN_SRC sh
loudnorm -i infile.(mkv|mp4|mov|m4v|m4a|aac|wav|mp3)
#+END_SRC

** normalize

normalize audio levels

+ script usage

#+BEGIN_SRC sh
normalize -i infile.(mp4|mkv|mov|m4v|aac|m4a|wav|mp3)
#+END_SRC

** subtitle-add

add subtitles to a video file

+ script usage

#+BEGIN_SRC sh
subtitle-add -i video.(mp4|mov|mkv|m4v) -s subtitle.srt
#+END_SRC

** trim-clip

trim video clip

+ script usage

#+BEGIN_SRC sh
trim-clip -s 00:00:00 -i video.(mp4|mov|mkv|m4v) -t 00:00:00
#+END_SRC

** waveform

create a waveform from an audio or video file and save as a png

+ script usage

#+BEGIN_SRC sh
waveform -i infile.(mp4|mkv|mov|m4v|wav|aac|m4a|mp3)
#+END_SRC
** xfade-clips

cross fade 2 video clips with either a 1 or 2 second cross fade
the videos must have the same codecs, size and frame rate
+ script usage

#+BEGIN_SRC sh
xfade-clips -a clip1.(mp4|mkv|mov|m4v) -b clip2.(mp4|mkv|mov|m4v) -d (1|2)
#+END_SRC

-d = duration either 1 to 2
