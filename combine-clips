#!/bin/sh

# combine video and audio clip

# script usage
usage ()
{
# if argument passed to function echo it
[ -z "${1}" ] || echo "! ${1}"
# display help
echo "\
# combine video and audio clip

$(basename "$0") -v infile.(mp4|mkv|mov|m4v) -a audio.(m4a|aac|wav|mp3) -o outfile.mp4
-v infile.(mp4|mkv|mov|m4v)
-a audio.(m4a|aac|wav|mp3)
-o outfile.mp4 :optional agument # if option not provided defaults to infile_name-combined-date-time"
exit 2
}

# error messages
NOTFILE_ERR='not a file'
INVALID_OPT_ERR='Invalid option:'
REQ_ARG_ERR='requires an argument'
WRONG_ARGS_ERR='wrong number of arguments passed to script'
NOT_MEDIA_FILE_ERR='is not a media file'

# if script is run arguments pass and check the options with getopts,
# else display script usage and exit
[ $# -gt 0 ] || usage "${WRONG_ARGS_ERR}"

# getopts check and validate options
while getopts ':v:a:o:h' opt
do
  case ${opt} in
     v) video="${OPTARG}"
	[ -f "${video}" ] || usage "${video} ${NOTFILE_ERR}";;
     a) audio="${OPTARG}"
	[ -f "${audio}" ] || usage "${audio} ${NOTFILE_ERR}";;
     o) outfile="${OPTARG}";;
     h) usage;;
     \?) usage "${INVALID_OPT_ERR} ${OPTARG}" 1>&2;;
     :) usage "${INVALID_OPT_ERR} ${OPTARG} ${REQ_ARG_ERR}" 1>&2;;
  esac
done
shift $((OPTIND-1))

# infile, infile name
video_nopath="${video##*/}"
video_name="${video_nopath%.*}"

# file command check input file mime type
video_filetype="$(file --mime-type -b "${video}")"
audio_filetype="$(file --mime-type -b "${audio}")"

# audio and video mimetypes
mov_mime='video/quicktime'
mkv_mime='video/x-matroska'
mp4_mime='video/mp4'
m4v_mime='video/x-m4v'
wav_mime='audio/x-wav'
audio_mime='audio/mpeg'
aac_mime='audio/x-hx-aac-adts'

# defaults for variables
outfile_default="${video_name}-combined-$(date +"%Y-%m-%d-%H-%M-%S").mp4"

# audio is aac, copy audio stream
record_copy () {
    ffmpeg \
    -hide_banner \
    -stats -v panic \
    -i "${video}" \
    -i "${audio}" \
    -c:a copy \
    -c:v copy \
    -map 0:v -map 1:a \
    -pix_fmt yuv420p \
    -movflags +faststart \
    -f mp4 \
    "${outfile:=${outfile_default}}"
}

# audio isnt aac, encode audio as aac
record_aac () {
    ffmpeg \
    -hide_banner \
    -stats -v panic \
    -i "${video}" \
    -i "${audio}" \
    -c:a aac \
    -c:v copy \
    -map 0:v -map 1:a \
    -pix_fmt yuv420p \
    -movflags +faststart \
    -f mp4 \
    "${outfile:=${outfile_default}}"
}

# check the video mime type
case "${video_filetype}" in
    ${mov_mime}|${mkv_mime}|${mp4_mime}|${m4v_mime});;
    *) usage "${video} ${NOT_MEDIA_FILE_ERR}";;
esac

# run the ffmpeg function based on the audio mime type
case "${audio_filetype}" in
    ${aac_mime}) record_copy "${video}" "${audio}";;
    ${wav_mime}|${audio_mime}) record_aac "${video}" "${audio}";;
    *) usage "${audio} ${NOT_MEDIA_FILE_ERR}";;
esac
