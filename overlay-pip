#!/bin/sh

# create a picture in picture

# script usage
usage()
{
# if argument passed to function echo it
[ -z "${1}" ] || echo "! ${1}"
# display help
echo "\
# create a picture in picture

$(basename "$0") -i infile.(mp4|mkv|mov|m4v) -v infile.(mp4|mkv|mov|m4v) -p [0-999] 
-m [00] -x (tl|tr|bl|br) -w [000] -f (0.1-9|1) -b [00] -c colour -o outfile.mp4

-i infile.(mp4|mkv|mov|m4v) : bottom video
-v infile.(mp4|mkv|mov|m4v) : overlay video
-p [0-999]                  : time to overlay the video
-m [00]                     : margin defaults to 0
-x (tl|tr|bl|br)            : pip postion - defaults to tr
-w [000]                    : width - defaults to 1/4 of vide size
-f (0.1-9|1)                : fade from 0.1 to 1 - defaults to 0.2
-b [00]                     : border
-c colour                   : colour
-o outfile.mp4              : optional agument # if option not provided defaults to infile-name-pip-date-time"
exit 2
}

# error messages
NOTFILE_ERR='not a file'
INVALID_OPT_ERR='Invalid option:'
REQ_ARG_ERR='requires an argument'
WRONG_ARGS_ERR='wrong number of arguments passed to script'
NOT_MEDIA_FILE_ERR='is not a media file'

# if script is run arguments pass and check the options with getopts,
# else display script usage and exit
[ $# -gt 0 ] || usage "${WRONG_ARGS_ERR}"

# position regex
position_regex='^[0-9]\{1,3\}$'

# duration regex match 0.[1-9]
dur_short='^[0]\{1\}\.[1-9]\{1\}$'
# duration regex match 1
dur_long='^[1]\{1\}$'

# margin regex
margin_regex='^[0-9]\{1,2\}$'

# width regex
width_regex='^[0-9]\{3\}$'

# border regex
border_regex='^[0-9]\{1,2\}$'

# getopts check and validate options
while getopts ':i:v:p:m:x:w:f:c:b:o:h' opt
do
  case ${opt} in
     i) video="${OPTARG}"
	[ -f "${video}" ] || usage "${video} ${NOTFILE_ERR}";;
     v) overlay="${OPTARG}"
	[ -f "${overlay}" ] || usage "${overlay} ${NOTFILE_ERR}";;
     p) position="${OPTARG}"
        expr "${position}" : "${position_regex}" 1>/dev/null || usage;;
     m) margin="${OPTARG}"
        expr "${margin}" : "${margin_regex}" 1>/dev/null || usage;;
     x) pip="${OPTARG}"
        case "${pip}" in
            tl|tr|bl|br);;
            *) usage "${pip} ${INVALID_OPT_ERR}";;
        esac;;
     w) width="${OPTARG}"
        expr "${width}" : "${width_regex}" 1>/dev/null || usage;;
     f) fade="${OPTARG}"
        expr "${fade}" : "${dur_short}" 1>/dev/null \
        || expr "${fade}" : "${dur_long}" 1>/dev/null;;
     c) colour="${OPTARG}";;
     b) border="${OPTARG}"
        expr "${border}" : "${border_regex}" 1>/dev/null || usage;;
     o) outfile="${OPTARG}";;
     h) usage;;
     \?) usage "${INVALID_OPT_ERR} ${OPTARG}" 1>&2;;
     :) usage "${INVALID_OPT_ERR} ${OPTARG} ${REQ_ARG_ERR}" 1>&2;;
  esac
done
shift $((OPTIND-1))

# video name extension and overlay video extensions
video_nopath="${video##*/}"
video_name="${video_nopath%.*}"

# file command check input file mime type
video_filetype="$(file --mime-type -b "${video}")"
overlay_filetype="$(file --mime-type -b "${overlay}")"

# audio and video mimetypes
mov_mime='video/quicktime'
mkv_mime='video/x-matroska'
mp4_mime='video/mp4'
m4v_mime='video/x-m4v'

# defaults for variables if not defined
outfile_default="${video_name}-pip-$(date +"%Y-%m-%d-%H-%M-%S").mp4"

# overlay video function
overlay_video () {
  ffmpeg \
  -hide_banner \
  -stats -v panic \
  -i "${video}" \
  -i "${overlay}" \
  -filter_complex \
  "[0:0]setpts=PTS-STARTPTS[firstclip];
   [1:0]setpts=PTS+${position}/TB[secondclip];
   [firstclip][secondclip]overlay=enable='between(t\,${position},${dp})'[ov];
   [0:0]scale=${width_scale:=${width_default}}${draw_border}[pip];
   [pip]format=pix_fmts=yuva420p,fade=t=in:st=${position}:d=${fade:=${fade_default}}:alpha=1,fade=t=out:st=${fade_end}:d=${fade:=${fade_default}}:alpha=1[pipfade];
   [ov][pipfade]overlay=${pip:=${pip_default}}:enable='between(t\,${position},${dp})'[pv]" \
  -map "[pv]" -map 0:1 \
  -pix_fmt yuv420p \
  -c:a copy -c:v libx264 -crf 18 \
  -movflags +faststart \
  -f mp4 \
  "${outfile:=${outfile_default}}"
}

# check the overlay mime type
case "${overlay_filetype}" in
    ${mov_mime}|${mkv_mime}|${mp4_mime}|${m4v_mime});;
    *) usage "${overlay} ${NOT_MEDIA_FILE_ERR}";;
esac

# get overlay videos duration with ffprobe
duration="$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "${overlay}" | cut -d\. -f1)"

# postion + duration
dp="$(expr "${position}" + "${duration}")"

# fade default
fade_default='0.2'
fade_end="$(echo "${dp}" - "${fade:=${fade_default}}" | bc)"

# pip padding
margin_default='20'

# pip default position
pip_default="${tr}"

# pip position
tl="${margin:=${margin_default}}:${margin:=${margin_default}}"
tr="main_w-overlay_w-${margin:=${margin_default}}:${margin:=${margin_default}}"
bl="${margin:=${margin_default}}:main_h-overlay_h-${margin:=${margin_default}}"
br="main_w-overlay_w-${margin:=${margin_default}}:main_h-overlay_h-${margin:=${margin_default}}"

# pip window size
width_default='iw/4:ih/4'

# check if width is null and unset
if [ -z "${width}" ]; then
    : # width not set pass
else
   width_scale="${width}:-1"
fi

# border
# divide border by 2 for the offset
border_default='4'
offset_default='2'
colour_default='#2f2f2f'
offset="$(expr "${border:=${border_default}}" / 2)"
draw_border=",pad=w=${border:=${border_default}}+iw:h=${border:=${border_default}}+ih:x=${offset:=${offset_default}}:y=${offset:=${offset_default}}:color=${colour:=${colour_default}}"

# dont show border if border set to 0
if [ "${border}" = 0 ]; then
   draw_border=''
fi

# pip position case
case "${pip}" in
    tl)pip="${tl}";;
    tr)pip="${tr}";;
    bl)pip="${bl}";;
    br)pip="${br}";;
    *) pip="${tr}";;
esac

# check the video mime type and run overlay function
case "${video_filetype}" in
    ${mov_mime}|${mkv_mime}|${mp4_mime}|${m4v_mime}) overlay_video "${video}" "${overlay}";;
    *) usage "${video} ${NOT_MEDIA_FILE_ERR}";;
esac
