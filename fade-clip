#!/bin/sh

# fade video and audio in and out

# script usage
usage()
{
  echo "$(basename "$0") -i infile.(mp4|mkv|mov|m4v) -d (0.[0-9]|1)"
  exit 2
}

# error messages
HOME_ERR='HOME directory not set or null'
NOTFILE_ERR='not a file'
INVALID_OPT_ERR='Invalid option:'
REQ_ARG_ERR='requires an argument'
WRONG_ARGS_ERR='wrong number of arguments passed to script'
ARGS_ERR='incorrect arguments passed to script'
FILE_EXT_ERR='has the wrong file extension'
NOT_MEDIA_FILE_ERR='is not a media file'

# number of args passed to script, needs to be stored before getopts
if [ $# -gt 0 ]; then
    firstarg="$1"
    thirdarg="$3"
    args="$#"
else
   { echo "${WRONG_ARGS_ERR}" && usage; }
fi

# getopts and check if input a file
while getopts ':i:d:h' opt
do
  case ${opt} in
     i) infile="${OPTARG}"
	[ -f "${infile}" ] || { echo "${infile} ${NOTFILE_ERR}" && usage; };;
     d) dur="${OPTARG}";;
     h) usage;;
     \?) echo "${INVALID_OPT_ERR} ${OPTARG}" 1>&2 && usage;;
     :) echo "${INVALID_OPT_ERR} ${OPTARG} ${REQ_ARG_ERR}" 1>&2 && usage;;
  esac
done
shift $((OPTIND-1))

# duration regex match 0.[1-9]
dur_short='^[0]\{1\}\.[1-9]\{1\}$'
# duration regex match 1
dur_long='^[1]\{1\}$'

# check arguments
if [ "${args}" -eq 4 ]; then
   {
   [ "${firstarg}" = '-i' ] && \
   [ -f "${infile}" ] && \
   [ "${thirdarg}" = '-d' ] && \
   expr "${dur}" : "${dur_short}" 1>/dev/null \
   || expr "${dur}" : "${dur_long}" 1>/dev/null
   } || { echo "${ARGS_ERR}" && usage; }
else
   { echo "${WRONG_ARGS_ERR}" && usage; }
fi

# infile, infile name and extension
infile_nopath="${infile##*/}"
infile_name="${infile_nopath%.*}"
infile_ext="${infile##*.}"

# file extension regular expressions for case statement
mp4='[Mm][Pp]4'
mkv='[Mm][Kk][Vv]'
mov='[Mm][[Oo][Vv]'
m4v='[Mm]4[Vv]'

# check the file extension before passing to the file command
case "${infile_ext}" in
    ${mp4}|${mkv}|${mov}|${m4v});;
    *) { echo "${infile} ${FILE_EXT_ERR}" && usage; };;
esac

# outfile file recording destination
videofile="${HOME:?${HOME_ERR}}/Desktop/${infile_name}-fade-$(date +"%Y-%m-%d-%H-%M-%S").mp4"

# ffmpeg fade video track
fade_v () {
    echo '+ Getting video duration' && \
    video_dur=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "${infile}" | cut -d\. -f1)
    vid_offset=$(echo "${video_dur}-${dur}" | bc -l)
    ffmpeg \
    -hide_banner \
    -stats -v panic \
    -i "${infile}" \
    -filter_complex \
    " [0:v] fade=t=in:st=0:d=${dur},fade=t=out:st='${vid_offset}':d=${dur}[fv] " \
    -map "[fv]" \
    -c:v libx264 -preset fast \
    -profile:v high \
    -crf 18 -coder 1 \
    -pix_fmt yuv420p \
    -movflags +faststart \
    -f mp4 \
    "${videofile}"
}

# fade video and audio tracks
fade_va () {
    echo '+ Getting video duration' && \
    video_dur=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "${infile}" | cut -d\. -f1)
    vid_offset=$(echo "${video_dur}-${dur}" | bc -l)
    ffmpeg \
    -hide_banner \
    -stats -v panic \
    -i "${infile}" \
    -filter_complex \
    " [0:a] afade=t=in:st=0:d=${dur},afade=t=out:st='${vid_offset}':d=${dur}[fa]; 
      [0:v] fade=t=in:st=0:d=${dur},fade=t=out:st='${vid_offset}':d=${dur}[fv]
    " \
    -map "[fv]" -map "[fa]" \
    -c:a aac \
    -c:v libx264 -preset fast \
    -profile:v high \
    -crf 18 -coder 1 \
    -pix_fmt yuv420p \
    -movflags +faststart \
    -f mp4 \
    "${videofile}"
}

# file command check input file mime type
filetype="$(file --mime-type -b "${infile}")"

# video mimetypes
mov_mime='video/quicktime'
mkv_mime='video/x-matroska'
mp4_mime='video/mp4'
m4v_mime='video/x-m4v'

# check the files mime type is a video
case "${filetype}" in
    ${mov_mime}|${mkv_mime}|${mp4_mime}|${m4v_mime});;
    *) { echo "${infile} ${NOT_MEDIA_FILE_ERR}" && usage; };;
esac

# check if video has an audio track
audio_check="$(ffprobe -i "${infile}" -show_streams -select_streams a -loglevel error)"

# check if audio_check is null which means the video doesnt have an audio track
if [ -z "${audio_check}" ]; then
   fade_v "${infile}" # fade video track
else
   fade_va "${infile}" # fade video and audio track
fi
