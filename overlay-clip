#!/bin/sh

# overlay one video clip on top of another video clip

# script usage
usage()
{
# if argument passed to function echo it
[ -z "${1}" ] || echo "! ${1}"
# display help
echo "\
# overlay one video clip on top of another video clip

$(basename "$0") -i infile.(mp4|mkv|mov|m4v) -v infile.(mp4|mkv|mov|m4v) -p [0-999] -o outfile.mp4
-i infile.(mp4|mkv|mov|m4v) : bottom video
-v infile.(mp4|mkv|mov|m4v) : overlay video
-p [0-999]                  : time to overlay the video
-o outfile.mp4              : optional agument # if option not provided defaults to infile-name-overlay-date-time"
exit 2
}

# error messages
NOTFILE_ERR='not a file'
INVALID_OPT_ERR='Invalid option:'
REQ_ARG_ERR='requires an argument'
WRONG_ARGS_ERR='wrong number of arguments passed to script'
NOT_MEDIA_FILE_ERR='is not a media file'

# if script is run arguments pass and check the options with getopts,
# else display script usage and exit
[ $# -gt 0 ] || usage "${WRONG_ARGS_ERR}"

# position regex
position_regex='^[0-9]\{1,3\}$'

# getopts check and validate options
while getopts ':i:v:p:o:h' opt
do
  case ${opt} in
     i) video="${OPTARG}"
	[ -f "${video}" ] || usage "${video} ${NOTFILE_ERR}";;
     v) overlay="${OPTARG}"
	[ -f "${overlay}" ] || usage "${overlay} ${NOTFILE_ERR}";;
     p) position="${OPTARG}"
        expr "${position}" : "${position_regex}" 1>/dev/null;;
     o) outfile="${OPTARG}";;
     h) usage;;
     \?) usage "${INVALID_OPT_ERR} ${OPTARG}" 1>&2;;
     :) usage "${INVALID_OPT_ERR} ${OPTARG} ${REQ_ARG_ERR}" 1>&2;;
  esac
done
shift $((OPTIND-1))

# video name extension and overlay video extensions
video_nopath="${video##*/}"
video_name="${video_nopath%.*}"

# file command check input file mime type
video_filetype="$(file --mime-type -b "${video}")"
overlay_filetype="$(file --mime-type -b "${overlay}")"

# audio and video mimetypes
mov_mime='video/quicktime'
mkv_mime='video/x-matroska'
mp4_mime='video/mp4'
m4v_mime='video/x-m4v'

# defaults for variables if not defined
outfile_default="${video_name}-overlay-$(date +"%Y-%m-%d-%H-%M-%S").mp4"

# overlay video function
overlay_video () {
  ffmpeg \
  -hide_banner \
  -stats -v panic \
  -i "${video}" \
  -i "${overlay}" \
  -filter_complex \
  "[0:0]setpts=PTS-STARTPTS[firstclip];
   [1:0]setpts=PTS+${position}/TB[secondclip];
   [firstclip][secondclip]overlay=enable='between(t\,${position},${dp})'[ov]" \
  -map "[ov]" -map 0:1 \
  -pix_fmt yuv420p \
  -c:a copy -c:v libx264 -crf 18 \
  -movflags +faststart \
  -f mp4 \
  "${outfile:=${outfile_default}}"
}

#   [firstclip][secondclip]overlay=enable='between(t\,${position},${dp})'[ov]" \
# check the overlay mime type
case "${overlay_filetype}" in
    ${mov_mime}|${mkv_mime}|${mp4_mime}|${m4v_mime});;
    *) usage "${overlay} ${NOT_MEDIA_FILE_ERR}";;
esac

# get overlay videos duration with ffprobe
duration="$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "${overlay}" | cut -d\. -f1)"

# postion + duration
dp="$(expr "${position}" + "${duration}")"

# check the video mime type and run overlay function
case "${video_filetype}" in
    ${mov_mime}|${mkv_mime}|${mp4_mime}|${m4v_mime}) overlay_video "${video}" "${overlay}";;
    *) usage "${video} ${NOT_MEDIA_FILE_ERR}";;
esac
