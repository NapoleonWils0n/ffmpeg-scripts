#!/bin/sh

#===============================================================================
# fade video and normalize audio levels
#===============================================================================

# dependencies:
# ffmpeg awk grep

#===============================================================================
# script usage
#===============================================================================

usage()
{
# if argument passed to function echo it
[ -z "${1}" ] || echo "! ${1}"
# display help
echo "\
# fade video and normalize audio levels

$(basename "$0") -i infile.(mp4|mkv|mov|m4v) -d (0.[0-9]|1) -o outfile.mp4

-d (0.[0-9]|1) :optional agument # if option not provided defaults to 0.5
-o outfile.mp4   :optional agument # if option not provided defaults to infile-name-normalized-date-time"
exit 2
}


#===============================================================================
# error messages
#===============================================================================

NOTFILE_ERR='not a file'
INVALID_OPT_ERR='Invalid option:'
REQ_ARG_ERR='requires an argument'
WRONG_ARGS_ERR='wrong number of arguments passed to script'


#===============================================================================
# check number of aruments passed to script
#===============================================================================

[ $# -gt 0 ] || usage "${WRONG_ARGS_ERR}"

# duration regex match 0.[1-9]
dur_short='^[0]\{1\}\.[1-9]\{1\}$'
# duration regex match 1
dur_long='^[1]\{1\}$'


#===============================================================================
# getopts check options passed to script
#===============================================================================

while getopts ':i:d:o:h' opt
do
  case ${opt} in
     i) infile="${OPTARG}"
	[ -f "${infile}" ] || usage "${infile} ${NOTFILE_ERR}";;
     d) dur="${OPTARG}"
        expr "${dur}" : "${dur_short}" 1>/dev/null \
        || expr "${dur}" : "${dur_long}" 1>/dev/null;;
     o) outfile="${OPTARG}";;
     h) usage;;
     \?) usage "${INVALID_OPT_ERR} ${OPTARG}" 1>&2;;
     :) usage "${INVALID_OPT_ERR} ${OPTARG} ${REQ_ARG_ERR}" 1>&2;;
  esac
done
shift $((OPTIND-1))


#===============================================================================
# variables
#===============================================================================

# infile, infile name and file extension
infile_nopath="${infile##*/}"
infile_name="${infile_nopath%.*}"

# defaults for variables if not defined
outfile_default="${infile_name}-normalized-$(date +"%Y-%m-%d-%H-%M-%S").mp4"
duration_default="0.5"

# print analyzing file
echo '+ Analyzing file with ffmpeg'

# ffmpeg loudnorm get stats from file
normalize=$(ffmpeg \
-hide_banner \
-i "${infile}" \
-af "loudnorm=I=-16:dual_mono=true:TP=-1.5:LRA=11:print_format=summary" \
-f null - 2>&1 | tail -n 12)

# read the output of normalize line by line and store in variables
for line in "${normalize}"; do
    measured_I=$(echo "${line}" | awk -F' ' '/Input Integrated:/ {print $3}')
    measured_TP=$(echo "${line}" | awk -F' ' '/Input True Peak:/ {print $4}')
    measured_LRA=$(echo "${line}" | awk -F' ' '/Input LRA:/ {print $3}')
    measured_thresh=$(echo "${line}" | awk -F' ' '/Input Threshold:/ {print $3}')
    offset=$(echo "${line}" | awk -F' ' '/Target Offset:/ {print $3}')
done

# check if the libfdk_aac codec is installed, if not fall back to the aac codec
aac_codec="$(ffmpeg -hide_banner -stats -v panic -h encoder=libfdk_aac)"
aac_error="Codec 'libfdk_aac' is not recognized by FFmpeg."
aac_check="$(echo "${aac_codec}" | grep "${aac_error}")"

# check ffmpeg aac codecs
if [ -z "${aac_check}" ]; then
   aac='libfdk_aac' # libfdk_aac codec is installed
else
   aac='aac' # libfdk_aac codec isnt installed, fall back to aac codec
fi


#===============================================================================
# functions
#===============================================================================

# video function
video () {
    video_dur=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "${infile}" | cut -d\. -f1)
    vid_offset=$(echo "${video_dur}-${dur:=${duration_default}}" | bc -l)
    ffmpeg \
    -hide_banner \
    -stats -v panic \
    -i "${infile}" \
    -filter_complex \
    "[0:a] afade=t=in:st=0:d=${dur:=${duration_default}},afade=t=out:st='${vid_offset}':d=${dur:=${duration_default}},
    compand=attacks=0:points=-70/-90|-24/-12|0/-6|20/-6,
    highpass=f=60,
    lowpass=f=13700,
    afftdn=nt=w,
    adeclick,
    deesser,
    loudnorm=I=-16:
    dual_mono=true:
    TP=-1.5:
    LRA=11:
    measured_I=${measured_I}:
    measured_LRA=${measured_LRA}:
    measured_TP=${measured_TP}:
    measured_thresh=${measured_thresh}:
    offset=${offset}:
    linear=true:
    print_format=summary [audio];
    [0:v] fade=t=in:st=0:d=${dur:=${duration_default}},fade=t=out:st='${vid_offset}':d=${dur:=${duration_default}}[video]" \
    -map "[video]" -map "[audio]" \
    -c:a "${aac}" -ar 44100 \
    -c:v libx264 -preset fast \
    -profile:v high \
    -crf 18 -coder 1 \
    -pix_fmt yuv420p \
    -movflags +faststart \
    -f mp4 \
    "${outfile:=${outfile_default}}"
}

# run the video function
video "${infile}"
