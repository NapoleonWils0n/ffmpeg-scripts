#!/bin/sh

#===============================================================================
# trim video or audio clip
#===============================================================================


#===============================================================================
# script usage
#===============================================================================

usage () {
# if argument passed to function echo it
[ -z "${1}" ] || echo "! ${1}"
# display help
echo "\
# trim video or audio clip
https://trac.ffmpeg.org/wiki/Seeking

$(basename "$0") -s 00:00:00.000 -i infile.(mp4|mov|mkv|m4v|aac|m4a|wav|mp3) -t 00:00:00.000 -o outfile.(mp4|aac|mp3|wav)
-s 00:00:00.000 : start time
-i infile.(mp4|mov|mkv|m4v|aac|m4a|wav|mp3)
-t 00:00:00.000 : number of seconds after start time
-o outfile.(mp4|aac|mp3|wav) :optional agument 
# if option not provided defaults infile-name-trimmed-date-time.(mp4|wav)"
exit 2
}


#===============================================================================
# error messages
#===============================================================================

INVALID_OPT_ERR='Invalid option:'
REQ_ARG_ERR='requires an argument'
WRONG_ARGS_ERR='wrong number of arguments passed to script'
NOT_MEDIA_FILE_ERR='is not a media file'


#===============================================================================
# check number of aruments passed to script
#===============================================================================

[ $# -gt 0 ] || usage "${WRONG_ARGS_ERR}"


#===============================================================================
# regular expressions for the expr command
#===============================================================================

# timecode - match 00:00:00.000000
timecode='^[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}[.]\{1\}\?[0-9]\{1,6\}\?$'


#===============================================================================
# getopts check options passed to script
#===============================================================================

while getopts ':s:i:t:o:h' opt
do
  case ${opt} in
     s) start="${OPTARG}"
         expr "${start}" : "${timecode}" 1>/dev/null || usage "${start}" "${INVALID_OPT_ERR}";;
     i) infile="${OPTARG}"
	[ -f "${infile}" ] || usage "${infile} ${NOTFILE_ERR}";;
     t) end="${OPTARG}"
        expr "${end}" : "${timecode}" 1>/dev/null || usage "${end}" "${INVALID_OPT_ERR}";;
     h) usage;;
     o) outfile="${OPTARG}";;
     \?) usage "${INVALID_OPT_ERR} ${OPTARG}" 1>&2;;
     :) usage "${INVALID_OPT_ERR} ${OPTARG} ${REQ_ARG_ERR}" 1>&2;;
  esac
done
shift $((OPTIND-1))


#===============================================================================
# variables
#===============================================================================

# infile name
infile_nopath="${infile##*/}"
infile_name="${infile_nopath%.*}"

# infile file extension
infile_ext="${infile##*.}"

# file command check input file mime type
filetype="$(file --mime-type -b "${infile}")"

# video mimetypes
mov_mime='video/quicktime'
mkv_mime='video/x-matroska'
mp4_mime='video/mp4'
m4v_mime='video/x-m4v'
wav_mime='audio/x-wav'
audio_mime='audio/mpeg'
aac_mime='audio/x-hx-aac-adts'
m4a_mime='audio/mp4'

# the file command wrongly identifies .m4a audio as a video file
# so we check if the file extension is .m4a and set the mime type to audio/mp4
if [ "${infile_ext}" = 'm4a' ]; then
    filetype="${m4a_mime}"
fi

# defaults for variables if not defined
videofile_default="${infile_name}-trimmed-$(date +"%Y-%m-%d-%H-%M-%S").mp4"
aac_default="${infile_name}-trimmed-$(date +"%Y-%m-%d-%H-%M-%S").aac"
mp3_default="${infile_name}-trimmed-$(date +"%Y-%m-%d-%H-%M-%S").mp3"
wav_default="${infile_name}-trimmed-$(date +"%Y-%m-%d-%H-%M-%S").wav"
m4a_default="${infile_name}-trimmed-$(date +"%Y-%m-%d-%H-%M-%S").m4a"


#===============================================================================
# check if the libfdk_aac codec is installed, if not fall back to the aac codec
#===============================================================================

aac_codec="$(ffmpeg -hide_banner -stats -v panic -h encoder=libfdk_aac)"
aac_error="Codec 'libfdk_aac' is not recognized by FFmpeg."
aac_check="$(echo "${aac_codec}" | grep "${aac_error}")"

# check ffmpeg aac codecs
if [ -z "${aac_check}" ]; then
   aac='libfdk_aac' # libfdk_aac codec is installed
else
   aac='aac' # libfdk_aac codec isnt installed, fall back to aac codec
fi


#===============================================================================
# audio and video functions
#===============================================================================

# trim video clip
trim_video () {
    ffmpeg \
    -hide_banner \
    -stats -v panic \
    -ss "${start}" \
    -i "${infile}" \
    -t "${end}" \
    -c:a "${aac}" \
    -c:v libx264 -profile:v high \
    -pix_fmt yuv420p -movflags +faststart \
    -f mp4 \
    "${outfile:=${videofile_default}}"
}

# trim aac audio clip
trim_aac () {
    ffmpeg \
    -hide_banner \
    -stats -v panic \
    -ss "${start}" \
    -i "${infile}" \
    -t "${end}" \
    -c:a "${aac}" \
    -f adts \
    "${outfile:=${aac_default}}"
}

# trim m4a audio clip
trim_m4a () {
    ffmpeg \
    -hide_banner \
    -stats -v panic \
    -ss "${start}" \
    -i "${infile}" \
    -t "${end}" \
    -c:a "${aac}" \
    -f mp4 \
    "${outfile:=${m4a_default}}"
}

# trim mp3 audio clip
trim_mp3 () {
    ffmpeg \
    -hide_banner \
    -stats -v panic \
    -ss "${start}" \
    -i "${infile}" \
    -t "${end}" \
    -c:a libmp3lame \
    -f mp3 \
    "${outfile:=${mp3_default}}"
}

# trim wav audio clip
trim_wav () {
    ffmpeg \
    -hide_banner \
    -stats -v panic \
    -ss "${start}" \
    -i "${infile}" \
    -t "${end}" \
    -c:a pcm_s16le \
    -f wav \
    "${outfile:=${wav_default}}"
}


#===============================================================================
# check the files mime type
#===============================================================================

case "${filetype}" in
    ${mov_mime}|${mkv_mime}|${mp4_mime}|${m4v_mime}) trim_video "${infile}";;
    ${aac_mime}) trim_aac "${infile}";;
    ${m4a_mime}) trim_m4a "${infile}";;
    ${audio_mime}) trim_mp3 "${infile}";;
    ${wav_mime}) trim_wav "${infile}";;
    *) usage "${infile} ${NOT_MEDIA_FILE_ERR}";;
esac
